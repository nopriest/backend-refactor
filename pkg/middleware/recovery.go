package middleware

import (
	"fmt"
	"net/http"
	"runtime/debug"

	"tab-sync-backend-refactor/pkg/config"
	"tab-sync-backend-refactor/pkg/utils"
)

// Recovery ÊÅ¢Â§ç‰∏≠Èó¥‰ª∂ÔºåÂ§ÑÁêÜpanicÂπ∂ËøîÂõûÂèãÂ•ΩÁöÑÈîôËØØ‰ø°ÊÅØ
func Recovery(cfg *config.Config) func(http.Handler) http.Handler {
	return func(next http.Handler) http.Handler {
		return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			defer func() {
				if err := recover(); err != nil {
					// ËÆ∞ÂΩïpanic‰ø°ÊÅØ
					stack := debug.Stack()
					
					if cfg.IsDevelopment() {
						// ÂºÄÂèëÁéØÂ¢ÉÔºöÊòæÁ§∫ËØ¶ÁªÜÈîôËØØ‰ø°ÊÅØ
						fmt.Printf("‚ùå PANIC: %v\n", err)
						fmt.Printf("üìç Stack trace:\n%s\n", stack)
						
						utils.WriteErrorResponseWithCode(w, http.StatusInternalServerError, 
							"INTERNAL_SERVER_ERROR", 
							fmt.Sprintf("Internal server error: %v", err),
							string(stack))
					} else {
						// Áîü‰∫ßÁéØÂ¢ÉÔºöÈöêËóèËØ¶ÁªÜÈîôËØØ‰ø°ÊÅØ
						fmt.Printf("‚ùå PANIC: %v\n", err)
						fmt.Printf("üìç Stack trace:\n%s\n", stack)
						
						utils.WriteInternalServerErrorResponse(w, "Internal server error occurred")
					}
				}
			}()

			next.ServeHTTP(w, r)
		})
	}
}

// ErrorHandler Áªü‰∏ÄÈîôËØØÂ§ÑÁêÜ‰∏≠Èó¥‰ª∂
func ErrorHandler(cfg *config.Config) func(http.Handler) http.Handler {
	return func(next http.Handler) http.Handler {
		return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			// ÂàõÂª∫‰∏Ä‰∏™Ëá™ÂÆö‰πâÁöÑResponseWriterÊù•ÊçïËé∑ÈîôËØØ
			ew := &errorResponseWriter{
				ResponseWriter: w,
				config:         cfg,
			}

			next.ServeHTTP(ew, r)
		})
	}
}

// errorResponseWriter ÂåÖË£ÖResponseWriter‰ª•ÊçïËé∑ÈîôËØØ
type errorResponseWriter struct {
	http.ResponseWriter
	config *config.Config
	written bool
}

func (ew *errorResponseWriter) WriteHeader(statusCode int) {
	if ew.written {
		return
	}
	ew.written = true

	// Â¶ÇÊûúÊòØÈîôËØØÁä∂ÊÄÅÁ†ÅÔºåËÆ∞ÂΩïÊó•Âøó
	if statusCode >= 400 {
		if ew.config.IsDevelopment() {
			fmt.Printf("‚ö†Ô∏è HTTP Error: %d\n", statusCode)
		}
	}

	ew.ResponseWriter.WriteHeader(statusCode)
}

func (ew *errorResponseWriter) Write(data []byte) (int, error) {
	if !ew.written {
		ew.WriteHeader(http.StatusOK)
	}
	return ew.ResponseWriter.Write(data)
}
